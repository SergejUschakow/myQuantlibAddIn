<Category name='templatecommodity'>
  <description>functions and methods for commodity models.</description>
  <displayName>Commodity Models</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/conversions/coercetermstructure.hpp</include>
    <include>qlo/baseinstruments.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/pricingengines.hpp</include>
    <include>qlo/interpolation.hpp</include>
    <include>qlo/templatecommodity.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/handleimpl.hpp</include>
    <include>qlo/conversions/coercetermstructure.hpp</include>
    <include>qlo/baseinstruments.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/pricingengines.hpp</include>
    <include>qlo/interpolation.hpp</include>
    <include>qlo/templatecommodity.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2015, Sebastian Schlenkrich
  </copyright>
  <Functions>
  
    <Constructor name='qlIndexTermStructure'>
      <libraryFunction>IndexTermStructure</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='RefDate'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>Reference date, t=0.</description>
          </Parameter>
          <Parameter name='Calendar'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET) to advance from global EvaluationDate.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/365 (Fixed)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>DayCounter ID.</description>
          </Parameter>
          <Parameter name='TimeInterpol' >
            <type>QuantLib::Interpolation</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to index interpolation I(t).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlIndexTermStructureValue' type='QuantLib::IndexTermStructure' >
      <description>Returns the (interpolated) value at future date.</description>
      <libraryFunction>value</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Date' >
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>Fixing date.</description>
          </Parameter>
          <Parameter name='Extrapolate' default='false' example='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Allow extrapolation.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlIndexTermStructureValue2' type='QuantLib::IndexTermStructure' >
      <description>Returns the (interpolated) value at future date.</description>
      <libraryFunction>value</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Time' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>Fixing time in year fractions.</description>
          </Parameter>
          <Parameter name='Extrapolate' default='false' example='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Allow extrapolation.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    
    <!-- mean reverting 2-factor normal/lognormal model -->

    <Constructor name='qlReal2FNormalModel'>
      <libraryFunction>Real2FNormalModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
            <Parameter name='Phi'>
              <type>QuantLib::IndexTermStructure</type>
              <superType>libToHandle</superType>
              <tensorRank>scalar</tensorRank>
              <description>Price forward curve.</description>
            </Parameter>
          <Parameter name='Times' exampleValue='5, 10, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of time-grid of left-constant model parameter values (in year fractions)</description>
          </Parameter>
          <Parameter name='Sigma' exampleValue ='0.05, 0.05, ...' default='0.0'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>Y-factor volatility.</description>
          </Parameter>
          <Parameter name='Eta' exampleValue ='0.05, 0.05, ...' default='0.0'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>Z-factor volatility.</description>
          </Parameter>
          <Parameter name='MeanA' exampleValue ='0.1' default='0.1'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Y-factor mean reversion.</description>
          </Parameter>
          <Parameter name='MeanB' exampleValue ='0.01' default='0.01'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Z-factor mean reversion.</description>
          </Parameter>
          <Parameter name='Rho' exampleValue ='0.5' default='0.5'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Y- vs Z-factor correlation.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>


    <Constructor name='qlReal2FLognormalModel'>
      <libraryFunction>Real2FLognormalModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Phi'>
            <type>QuantLib::IndexTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>deterministic drift.</description>
          </Parameter>
          <Parameter name='Times' exampleValue='5, 10, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of time-grid of left-constant model parameter values (in year fractions)</description>
          </Parameter>
          <Parameter name='Sigma' exampleValue ='0.05, 0.05, ...' default='0.0'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>Y-factor volatility.</description>
          </Parameter>
          <Parameter name='Eta' exampleValue ='0.05, 0.05, ...' default='0.0'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>Z-factor volatility.</description>
          </Parameter>
          <Parameter name='MeanA' exampleValue ='0.1' default='0.1'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Y-factor mean reversion.</description>
          </Parameter>
          <Parameter name='MeanB' exampleValue ='0.01' default='0.01'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Z-factor mean reversion.</description>
          </Parameter>
          <Parameter name='Rho' exampleValue ='0.5' default='0.5'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Y- vs Z-factor correlation.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlReal2FMRModelFutureAsset' type='QuantLib::Real2FMeanReversionModel' >
      <description>Returns the future asset value for a delivery period.</description>
      <libraryFunction>futureAsset</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTime' exampleValue='1'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>future observation times</description>
          </Parameter>
          <Parameter name='SettlementTime' exampleValue='2'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>future settlement or delivery time</description>
          </Parameter>
          <Parameter name='Y' exampleValue='0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>future state variable Y(obsTime)</description>
          </Parameter>
          <Parameter name='Z' exampleValue='0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>future state variable Z(obsTime)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>


    <Member name='qlReal2FMRModelAverageFuture' type='QuantLib::Real2FMeanReversionModel' >
      <description>Returns the future value for a delivery period.</description>
      <libraryFunction>averageFuture</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='SettlementTimes' exampleValue='10, 11, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of future settlement times</description>
          </Parameter>
          <Parameter name='SettlementWeights' exampleValue='1/30, 1/30, ...'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of future settlement weights</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlReal2FMRModelVanillaOption' type='QuantLib::Real2FMeanReversionModel' >
      <description>Returns the Vanilla option price on a future for a delivery period.</description>
      <libraryFunction>vanillaOption</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ExpiryTime' exampleValue='10'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>option expiry time</description>
          </Parameter>
          <Parameter name='SettlementTimes' exampleValue='10, 11, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of future settlement times</description>
          </Parameter>
          <Parameter name='SettlementWeights' exampleValue='1/30, 1/30, ...'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of future settlement weights</description>
          </Parameter>
          <Parameter name='Strike' exampleValue='20'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>option strike</description>
          </Parameter>
          <Parameter name='CallOrPut' exampleValue='1' default='1'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Call (+1) or put (-1) option</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- Debug various lognormal volatility approximations -->
    <Member name='qlReal2FLognormalModelAverageFutureStDev' type='QuantLib::Real2FLognormalModel' >
      <description>Returns the approximate Black standard deviation.</description>
      <libraryFunction>averageFutureStDev</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ExpiryTime' exampleValue='10'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>option expiry time</description>
          </Parameter>
          <Parameter name='SettlementTimes' exampleValue='10, 11, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of future settlement times</description>
          </Parameter>
          <Parameter name='SettlementWeights' exampleValue='1/30, 1/30, ...'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of future settlement weights</description>
          </Parameter>
          <Parameter name='ApproximationType' exampleValue='0' default='0'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Various approximation, see source code for details.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>


  </Functions>
</Category>
