<Category name='templatequasigaussian'>
  <description>functions and methods for template based Quasi Gaussian model.</description>
  <displayName>Template Quasi Gaussain Model</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/conversions/coercetermstructure.hpp</include>
    <include>qlo/baseinstruments.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/pricingengines.hpp</include>
    <include>qlo/bonds.hpp</include>
    <include>qlo/swaption.hpp</include>
    <include>qlo/schedule.hpp</include>    
    <include>qlo/templatequasigaussian.hpp</include>
    <include>ql/experimental/template/qgaussian/quasigaussianmodels.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/handleimpl.hpp</include>
    <include>qlo/conversions/coercetermstructure.hpp</include>
    <include>qlo/baseinstruments.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/pricingengines.hpp</include>
    <include>qlo/bonds.hpp</include>
    <include>qlo/swaption.hpp</include>
    <include>qlo/schedule.hpp</include>
    <include>qlo/templatequasigaussian.hpp</include>
    <include>ql/experimental/template/qgaussian/quasigaussianmodels.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2015, Sebastian Schlenkrich
  </copyright>
  <Functions>

    <!-- Constructor(s) for RealQuasiGaussianModel -->
    
    <Constructor name='qlRealQuasiGaussianModel'>
      <libraryFunction>RealQuasiGaussianModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='DiscountCurve'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure for discounting.</description>
          </Parameter>
          <Parameter name='D' exampleValue ='4' default='4'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number risk factors for yield curve (excl. stoch. vol).</description>
          </Parameter>
          <Parameter name='Times' exampleValue='5, 10, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of time-grid of left-constant model parameter values (in year fractions)</description>
          </Parameter>
          <Parameter name='Lambda' exampleValue ='0.05, 0.05, ...' default='0.0'>
            <type>QuantLib::Time</type>
            <tensorRank>matrix</tensorRank>
            <description>volatility (times,d).</description>
          </Parameter>
          <Parameter name='Alpha' exampleValue ='0.05, 0.05, ...' default='0.0'>
            <type>QuantLib::Time</type>
            <tensorRank>matrix</tensorRank>
            <description>shift (times,d).</description>
          </Parameter>
          <Parameter name='B' exampleValue ='0.05, 0.05, ...' default='0.0'>
            <type>QuantLib::Time</type>
            <tensorRank>matrix</tensorRank>
            <description>scaling (times,d).</description>
          </Parameter>
          <Parameter name='Eta' exampleValue ='0.05, 0.05, ...' default='0.0'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vol-of-vol (times).</description>
          </Parameter>
          <Parameter name='Delta' exampleValue ='0.5, 2.0, 10.0, 30.0 ...' default='0.0'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>maturity of benchmark rates (d).</description>
          </Parameter>
          <Parameter name='Chi' exampleValue ='0.015, 0.15, 0.30, 1.20 ...' default='0.1'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>mean reversion speads (d).</description>
          </Parameter>
          <Parameter name='Gamma' exampleValue ='1.0, 0.7, ...' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>matrix</tensorRank>
            <description>benchmark rate correlation matrix (d,d).</description>
          </Parameter>
          <Parameter name='Theta' exampleValue ='0.1' default='0.1'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>stoch vol mean reversion speads.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- Inspectors for RealQuasiGaussianModel -->

    <Member name='qlRealQuasiGaussianModelDfT' type='QuantLib::RealQuasiGaussianModel' >
      <description>Returns the factorized correlation matrix.</description>
      <libraryFunction>DfT</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealQuasiGaussianModelHHfInv' type='QuantLib::RealQuasiGaussianModel' >
      <description>Returns the inverse H Hf^-1.</description>
      <libraryFunction>HHfInv</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealQuasiGaussianModelLambda' type='QuantLib::RealQuasiGaussianModel' >
      <description>Returns model vol.</description>
      <libraryFunction>lambda</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Index' exampleValue ='0' default='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>risk factor index.</description>
          </Parameter>
          <Parameter name='Time' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealQuasiGaussianModelAlpha' type='QuantLib::RealQuasiGaussianModel' >
      <description>Returns model shift.</description>
      <libraryFunction>alpha</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Index' exampleValue ='0' default='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>risk factor index.</description>
          </Parameter>
          <Parameter name='Time' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealQuasiGaussianModelB' type='QuantLib::RealQuasiGaussianModel' >
      <description>Returns model f-weight.</description>
      <libraryFunction>b</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Index' exampleValue ='0' default='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>risk factor index.</description>
          </Parameter>
          <Parameter name='Time' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealQuasiGaussianModelEta' type='QuantLib::RealQuasiGaussianModel' >
      <description>Returns model vol-of-vol.</description>
      <libraryFunction>eta</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Time' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- Constructor(s) for RealMCSimulation -->

    <Constructor name='qlRealMCSimulation'>
      <libraryFunction>RealMCSimulation</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ProcessOrModel' >
            <type>QuantLib::RealStochasticProcess</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to process or model.</description>
          </Parameter>
          <Parameter name='SimTimes' exampleValue='5, 10, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of time-grid for SDE integration (in year fractions)</description>
          </Parameter>
          <Parameter name='ObsTimes' exampleValue='5, 10, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of time-grid for process observation (in year fractions)</description>
          </Parameter>
          <Parameter name='NPaths' exampleValue ='1024' default='1024' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of MC paths.</description>
          </Parameter>
          <Parameter name='Seed' exampleValue ='1234' default='1234' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>MC seed.</description>
          </Parameter>
          <Parameter name='RichardsonExtrapolation' exampleValue ='true' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>use Richardson extrapolation (true or false).</description>
          </Parameter>
          <Parameter name='TimeInterpolation' exampleValue ='true' default='true'>
            <type>bool</type>
             <tensorRank>scalar</tensorRank>
            <description>allow time-interpolation for payoff evaluation on simulated paths (true or false).</description>
          </Parameter>
          <Parameter name='StoreBrownians' exampleValue ='false' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>store Brownian motion increments (true or false).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- Run simulation with RealMCSimulation -->

    <Member name='qlRealMCSimulationSimulate' type='QuantLib::RealMCSimulation' >
      <description>Simulate MC paths.</description>
      <libraryFunction>simulate</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- Inspectors for RealMCSimulation -->

    <Member name='qlRealMCSimulationSimTimes' type='QuantLib::RealMCSimulation' >
      <description>Returns simulation times.</description>
      <libraryFunction>simTimes</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationObsTimes' type='QuantLib::RealMCSimulation' >
      <description>Returns observation times.</description>
      <libraryFunction>obsTimes</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationNPaths' type='QuantLib::RealMCSimulation' >
      <description>Returns number of MC paths.</description>
      <libraryFunction>nPaths</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationBrownian' type='QuantLib::RealMCSimulation' >
      <description>Returns the n-th Brownian increments.</description>
      <libraryFunction>brownian</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='N' exampleValue ='0' default='0' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>index of MC path (0 .. nPaths).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationPath' type='QuantLib::RealMCSimulation' >
      <description>Returns the n-th MC path.</description>
      <libraryFunction>observedPath</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='N' exampleValue ='0' default='0' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>index of MC path (0 .. nPaths).</description>
          </Parameter>
        </Parameters>      
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <!-- Payoffs and Pricer -->

    <Procedure name='qlRealMCPayoffsNPV' >
      <description>Returns NPV of simulated payoff.</description>
      <alias>QuantLib::RealMCPayoffPricer::NPV</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Payoffs' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>vector</tensorRank>
            <description>reference to payoffs.</description>
          </Parameter>
          <Parameter name='Simulation' >
            <type>QuantLib::RealMCSimulation</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to RealMCSimulation object.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>


    <Constructor name='qlRealMCPayoffPricer'>
      <libraryFunction>RealMCPayoffPricer</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Payoffs' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>vector</tensorRank>
            <description>reference to payoffs.</description>
          </Parameter>
          <Parameter name='Simulation' >
            <type>QuantLib::RealMCSimulation</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to RealMCSimulation object.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlRealMCPayoffPricerNPV' type='QuantLib::RealMCPayoffPricer' >
      <description>Returns NPV of simulated payoff.</description>
      <libraryFunction>NPV</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlRealMCCash'>
      <libraryFunction>RealMCCash</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (t).</description>
          </Parameter>
          <Parameter name='PayTime' exampleValue ='2' default='2' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>payment time (T).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCAnnuity'>
      <libraryFunction>RealMCAnnuity</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (t).</description>
          </Parameter>
          <Parameter name='PayTimes' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of payment times.</description>
          </Parameter>
          <Parameter name='PayWeights' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of payment weights (usually year fractions).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCModelSwaption'>
      <libraryFunction>RealMCModelSwaption</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (t).</description>
          </Parameter>
          <Parameter name='Times' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of start and payment times.</description>
          </Parameter>
          <Parameter name='PayWeights' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of payment weights (usually year fractions).</description>
          </Parameter>
          <Parameter name='StrikeRate' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>strike (or swap fixed) rate.</description>
          </Parameter>
          <Parameter name='PayOrReceive' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>pay (+1) or receive (-1) fixed rate.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>



  </Functions>
</Category>
